<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Play Comparison</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        h1, h2 {
            color: #333;
            text-align: center; /* Center the title */
        }
        #comparison-container {
            background: #fff;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            text-align: center;
        }
        /* Styling for item buttons */
        .item-button {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            color: #fff;
            border: none;
            padding: 20px 40px;
            font-size: 24px;
            font-weight: bold;
            border-radius: 10px;
            cursor: pointer;
            margin: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
            display: flex;
            justify-content: center;
            align-items: center;
            width: 400px; /* Set fixed width */
            height: 200px; /* Set fixed height */
            white-space: normal; /* Allow text to wrap */
        }
        .item-button:hover {
            background: linear-gradient(135deg, #2575fc 0%, #6a11cb 100%);
            transform: translateY(-5px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }

        /* Flexbox for aligning buttons side by side */
        #button-wrapper {
            display: flex;
            justify-content: center; /* Center buttons */
        }

        .back-next-button {
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
        }

        .back-next-button:hover {
            background-color: #0069d9;
        }

        #progress-container {
            background: #f0f0f0;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 20px;
        }
        #progress-bar {
            background-color: yellow; /* Start with yellow */
            height: 20px;
            border-radius: 5px;
            width: 0%;
            transition: background-color 0.5s ease; /* Smooth transition for color change */
        }
        #progress-status {
            text-align: center;
            margin-top: 5px;
        }

        #clear-cookies-button {
            display: none; /* Initially hide the button */
            margin: 10px;
            background-color: red;
        }
    </style>
</head>
<body>
    <!-- Progress Bar -->
    <div id="progress-container">
        <div id="progress-bar"></div>
        <div id="progress-status">0 / 0 (No Items in this category)</div>
    </div>

    <div id="comparison-container">
        <h2><%= prompt %></h2>

        <div id="button-wrapper">
            <button class="item-button" id="item1-button"></button>
            <button class="item-button" id="item2-button"></button>
        </div>
    </div>

    <div id="button-container" style="text-align: center;">
        <button class="back-next-button" onclick="location.href='/categories'">Back to Categories</button>
        <button class="back-next-button" id="clear-cookies-button">Restart Progress (Clear Cookies)</button>
    </div>

    <script>
        let currentIndex = 0;
        const items = [
            <% columns.forEach(function(item, index) { %>
                '<%= item %>'<%= index < columns.length - 1 ? ',' : '' %>
            <% }) %>
        ];

        const comparisons = [];
        for (let i = 0; i < items.length; i++) {
            for (let j = i + 1; j < items.length; j++) {
                comparisons.push([items[i], items[j]]);
            }
        }

        const totalComparisons = comparisons.length; // Total number of comparisons

        // Load progress from cookies
        function loadProgress() {
            const encodedTableName = encodeURIComponent("<%= tableName %>");
            const name = `currentIndex_${encodedTableName}=`;
            const cookiesSplit = document.cookie.split(';');

            cookiesSplit.forEach(element => {
                const cookie = element.trim();
                if (cookie.startsWith(name)) {
                    const indexValue = cookie.split('=')[1];
                    currentIndex = (!isNaN(indexValue) && indexValue < totalComparisons) ? parseInt(indexValue, 10) : 0;
                }
            });
        }

        // Display the current comparison
        function displayComparison() {
            updateProgress();
            if (currentIndex < totalComparisons) {
                const [item1, item2] = comparisons[currentIndex];
                document.getElementById('item1-button').innerText = decodeHTMLEntities(item1);
                document.getElementById('item2-button').innerText = decodeHTMLEntities(item2);
            } else {
                showCompletionPage();
            }
        }

        // Update the progress bar and status
        function updateProgress() {
            const progress = (currentIndex / totalComparisons) * 100;
            document.getElementById('progress-bar').style.width = `${progress}%`;

            // Change progress bar color to green when completed
            if (currentIndex === totalComparisons) {
                document.getElementById('progress-bar').style.backgroundColor = '#28a745'; // Change to green
            }

            document.getElementById('progress-status').innerText = `${currentIndex} / ${totalComparisons}`;
        }

        // Handle user selection
        function handleSelection(winner) {
            incrementItemValue(winner);
            const encodedTableName = encodeURIComponent("<%= tableName %>");
            document.cookie = `currentIndex_${encodedTableName}=${currentIndex + 1}; expires=${getCookieExpirationDate(5)}; path=/`;
            currentIndex++;
            displayComparison();
        }

        function getCookieExpirationDate(months) {
            const now = new Date();
            now.setMonth(now.getMonth() + months);
            return now.toUTCString();
        }

        function showCompletionPage() {
            document.getElementById('comparison-container').innerHTML = `
                <h2>You have compared every item!</h2>
                <p><a href="/categories/<%= tableName %>" style="color: #007bff; text-decoration: underline;">View Results</a></p>
            `;
            document.getElementById('progress-status').innerText = "Completed";
            document.getElementById('progress-bar').style.backgroundColor = '#28a745'; // Change to green
        }

        function decodeHTMLEntities(text) {
            const textarea = document.createElement('textarea');
            textarea.innerHTML = text;
            return textarea.value;
        }

        function incrementItemValue(item) {
            const parsedTableName = decodeHTMLEntities("<%= tableName %>");
            const parsedItemName = decodeHTMLEntities(item);

            fetch(`/increment-value`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ tableName: parsedTableName, item: parsedItemName }),
            })
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.json();
            })
            .catch(error => {
                console.error('Error incrementing item value:', error);
            });
        }

        function clearCookies() {
            const cookies = document.cookie.split("; ");
            cookies.forEach(cookie => {
                const name = cookie.split("=")[0];
                document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;
            });
            location.reload(); // Refresh the page after clearing cookies
        }

        // Show the clear cookies button when "josh" is typed
        let inputBuffer = '';
        document.addEventListener('keydown', (event) => {
            inputBuffer += event.key;

            // Check if the last characters match "josh"
            if (inputBuffer.slice(-4) === 'josh') {
                document.getElementById('clear-cookies-button').style.display = 'block';
            }

            // Reset the input buffer if it exceeds 4 characters
            if (inputBuffer.length > 4) {
                inputBuffer = inputBuffer.slice(1);
            }
        });

        loadProgress();
        displayComparison();

        document.getElementById('item1-button').addEventListener('click', () => handleSelection(comparisons[currentIndex][0]));
        document.getElementById('item2-button').addEventListener('click', () => handleSelection(comparisons[currentIndex][1]));
        document.getElementById('clear-cookies-button').addEventListener('click', clearCookies);
    </script>
</body>
</html>
